
import java.io.File;
import java.io.IOException;
import java.net.MulticastSocket;
import java.net.ServerSocket;
import java.util.ArrayList;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.RandomAccessFile;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author tecni
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    ArrayList <Datos> nodos = new ArrayList();
    ArrayList <Archivo> archivos = new ArrayList();
    ArrayList <Archivo> respuesta = new ArrayList();
    ArrayList <ListaRespuesta> resultado = new ArrayList();
    DefaultTableModel model = new DefaultTableModel();
    DefaultTableModel modelSer = new DefaultTableModel();     
    String rutaDescarga = "G:\\Otros\\Practica7\\Descargas\\";
    
    public Interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtBuscar = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArchivos = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTablaServidores = new javax.swing.JTable();
        jBtnInicio = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableEncontrados = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Practica 7. RMI");

        jLabel1.setText("Servidores activos");

        jLabel2.setText("Archivos descargados");

        jTxtBuscar.setColumns(20);
        jTxtBuscar.setRows(5);
        jTxtBuscar.setName("Jbuscar"); // NOI18N
        jScrollPane1.setViewportView(jTxtBuscar);

        jButton1.setText("Buscar");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jTextArchivos);

        jLabel3.setText("Resultado de busqueda");

        jTablaServidores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "RMI", "Servidor Flujo", "Temporizador"
            }
        ));
        jScrollPane4.setViewportView(jTablaServidores);

        jBtnInicio.setText("Inicio");
        jBtnInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnInicioActionPerformed(evt);
            }
        });

        jTableEncontrados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTableEncontrados);

        jButton2.setText("Descargar");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnInicio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBtnInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Boton Buscar
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String archivo = jTxtBuscar.getText();
        System.out.println("Buscando archivo: "+archivo);
        ArrayList <String> diccionario = new ArrayList();
        if(archivos.size()>0)
        {
            archivos.clear();
        }
        
        
        resultado.clear();
        respuesta.clear();
        
        while(model.getRowCount() > 0)
        {
            model.removeRow(0);
        }
        jTableEncontrados.setModel(model);
        
        
        int bandera =0;
        
        for(Datos datos: nodos)
        {         
            //lienteRMI(String archivo, int puertoRMI, ArrayList <Archivo> Lista)
            System.out.println("Buscando en el puerto: "+ datos.getPuertoRMI());
            new ClienteRMI(archivo, Integer.parseInt(datos.getPuertoRMI()), respuesta, datos.getDirrecion()).start();
            resultado.add(new ListaRespuesta(respuesta));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
        try {
            Thread.sleep(1000);
           
            for(ListaRespuesta res: resultado)
            {
                archivos.addAll(res.getArchivos());
            }
                          
            if(archivos.size() > 0)
            {
                for(int i = 0; i<archivos.size(); i++)
                {
                    //Vemos si se repiten archivos para evitar que muestre muchos archivos
                    String nombre = archivos.get(i).getArchivo();
                    if(!diccionario.contains(nombre))
                    {
                        diccionario.add(nombre);
                        long tam = archivos.get(i).getTam();
                        String md5 = archivos.get(i).getHash();
                        model.addRow(new Object[]{md5,nombre,tam}); 
                    }              
                }
                JOptionPane.showMessageDialog(rootPane, "Se encontraron "+diccionario.size()+" archivos con ese nombre"); 
                jTableEncontrados.setModel(model);
                jButton2.setEnabled(true);
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "Se encontraron "+diccionario.size()+" archivos con ese nombre");
                jButton2.setEnabled(false);
            }
            
            
        } catch (InterruptedException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }//GEN-LAST:event_jButton1ActionPerformed

    public String generarId(){
        UUID uuid = UUID.randomUUID();
        return uuid.toString();
    }
    
    public void crearServers() throws IOException, InterruptedException
    {
        String[] direcciones = new String[2];
        direcciones[0] = "G:\\Otros\\Practica7\\Server2\\";
        direcciones[1] = "G:\\Otros\\Practica7\\Server3\\";
        
        for(int i=0; i<2; i++)
        {
            int puertoRMI = puertos(1999,4000);
            int puertoEnvio = puertos(7778,10000);
            String ID = generarId();
            MulticastSocket ms = new MulticastSocket(7777);
            ms.setReuseAddress(true);
            ms.setTimeToLive(225);
              
            String ruta = direcciones[i];
            
            System.out.println("Ruta de la carpeta: "+ ruta);
            new ServidorMulticast(ms,puertoRMI,puertoEnvio, ID, direcciones[i]).start();
            new ClienteMulticast(ms, puertoRMI, puertoEnvio, ID, nodos,direcciones[i]).start();
            
            modelSer.addRow(new Object[]{ID, puertoRMI, puertoEnvio, "5" });
            new ServicioRMI(puertoRMI).start();
            Thread.sleep(1000);
            
            new ServidorFlujo(puertoEnvio, rutaDescarga).start();
        }
        jTablaServidores.setModel(modelSer);
        
    
    }
    
    //Boton Inicio
    
    private void jBtnInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnInicioActionPerformed
       
        int puertoRMI = puertos(1999,4000);
        int puertoEnvio = puertos(7778,10000);
        String ID = generarId();
        
        try 
        {
            MulticastSocket ms = new MulticastSocket(7777);
            ms.setReuseAddress(true);
            ms.setTimeToLive(225);
              
            String ruta = "G:\\Otros\\Practica7\\Server1\\";
            
            System.out.println("Ruta de la carpeta: "+ ruta);
            //ServidorMulticast(MulticastSocket ms, int PuertoRMI, int PuertoEnvio, String ID, String direccion)
            //ClienteMulticast(MulticastSocket ms, int PuertoRMI, int PuertoFlujo, String ID, ArrayList <Datos> servidores, String direccion)
            new ServidorMulticast(ms,puertoRMI,puertoEnvio, ID,ruta).start();
            new ClienteMulticast(ms, puertoRMI, puertoEnvio, ID, nodos,ruta).start();
            
            //Agregamos las columnas y el primer servidor
            modelSer.addColumn("Id");
            modelSer.addColumn("RMI");
            modelSer.addColumn("Envio");
            modelSer.addColumn("Temp");
            modelSer.addRow(new Object[]{ID, puertoRMI, puertoEnvio, "5" });
            //jTablaServidores.setModel(model);
            
            
            System.out.println("Server RMI iniciado");
            //ServicioRMI(int puerto, String ruta)
            new ServicioRMI(puertoRMI).start();
            Thread.sleep(1000);
            
            new ServidorFlujo(puertoEnvio,rutaDescarga).start();
            model.addColumn("MD5");
            model.addColumn("Nombre");
            model.addColumn("Tamaño");
            crearServers();
            
            jButton1.setEnabled(true);
            jBtnInicio.setEnabled(false);
            
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }//GEN-LAST:event_jBtnInicioActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int row = jTableEncontrados.getSelectedRow();
        String hash = jTableEncontrados.getValueAt(row, 0).toString();
        String nombre = jTableEncontrados.getValueAt(row, 1).toString();
        String tam = jTableEncontrados.getValueAt(row,2).toString();
        long tama = Long.parseLong(tam);
        int resultados = jTableEncontrados.getRowCount();
        
        ArrayList <Integer> indi = new ArrayList();
        ArrayList <String> direcciones = new ArrayList();
        for(int i=0; i<resultado.size(); i++)
        {
            ListaRespuesta lista = resultado.get(i);
            for(int j = 0; j<lista.getArchivos().size(); j++)
            {
                Archivo elem = lista.getArchivos().get(j);
                if(hash.equals(elem.getHash()))
                {
                    indi.add(i);
                    direcciones.add(elem.getArchivo());
                    break;
                }
            }
        }
        
        JOptionPane.showMessageDialog(rootPane, "La descarga se dividira en "+resultados+" servidores");
        String fileName = archivos.get(row).getArchivo();
        String [] fileParts = fileName.split("\\\\");
        fileName = fileParts[fileParts.length - 1];
        
        try
        {
            
            int puerto = Integer.parseInt(nodos.get(indi.get(0)).getPuertoEnvio());
            String path = nodos.get(indi.get(0)).getDirrecion();
            
            //ClienteFlujo(String path, int puerto, int tam)
            //new ServidorFlujo(puerto, rutaDescarga).start();
            new ClienteFlujo(nombre,fileName,puerto,tama).start();
            Thread.sleep(1000);
            
            
            Thread.sleep(1000);
            archivos.clear();
            JOptionPane.showMessageDialog(rootPane, "Descarga completada");
            String texto = jTextArchivos.getText();
            texto = texto + "\n" + nombre;
            jTextArchivos.setText(texto);
            
        }catch(Exception ex){
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jButton2ActionPerformed
    
    public int puertos(int lim_menor, int lim_sup)
    {
        for(int puerto = lim_menor; puerto < lim_sup; puerto++)
        {
            try{
                ServerSocket ss = new ServerSocket(puerto);
                ss.close();
                return puerto;
            }catch(Exception ex){}

        }
        return 0;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnInicio;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTablaServidores;
    private javax.swing.JTable jTableEncontrados;
    private javax.swing.JTextPane jTextArchivos;
    private javax.swing.JTextArea jTxtBuscar;
    // End of variables declaration//GEN-END:variables
}
